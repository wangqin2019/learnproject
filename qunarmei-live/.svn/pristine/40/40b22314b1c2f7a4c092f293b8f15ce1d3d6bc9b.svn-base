<?php
/**
 * Created by PhpStorm.
 * User: wq
 * Date: 2019/10/14
 * Time: 15:36
 */

namespace app\neibu\service;
use app\api\model\Branch;
use app\api\model\BjGoods;
use app\api\model\Live;
use app\api\service\BaseSer;
use think\Db;
use think\Exception;
set_time_limit(0);
/**
 * 日常工作服务类
 */
class DailyWorkService extends BaseSer
{
    // 直播间商品id
    protected $pidzb = [1748134,1941467,1941468,1941469,1941470,1941471,1941472,1941473,1974355];
    // 肌底液不上的商品id
    protected $pidjdy = [1941472];
    // 88礼券商品id
    protected $pidcard = [1974358];

    // 模型定义
    protected $bwk_model ;//门店模型
    protected $gd_model ;//商品模型
    protected $live_model ;//直播模型
    /*
     * 初始化方法
     */
    public function __construct()
    {
        $this->bwk_model = new Branch();
        $this->gd_model = new BjGoods();
        $this->live_model = new Live();
    }

    /**
     * 删除腾讯云不用的聊天室
     */
    public function delChat()
    {
        $this->code = 0;
        $this->msg = '聊天室删除失败';
        // 1.查询不用的聊天室
        $map['user_id'] = ['neq',1];
        $map['live_source'] = 2;
        $map['statu'] = ['neq',1];
        $map['insert_time'] = ['>=',1582359176];
        $res = $this->live_model->field('id,chat_id,count(id) cnt')->where($map)->order('insert_time asc')->group('chat_id')->limit(10)->select();
        // 2.调用腾讯云删除
        if($res){
            $data = [];
            $timser = new \tencent_cloud\TimChat();
            foreach ($res as $v) {
                $data[] = $v['chat_id'];
                $timser->destroyroup($v['chat_id']);
            }
            $this->code = 1;
            $this->msg = '聊天室删除成功';
            $this->data = $data;
        }
        return $this->returnArr();
    }

    public function updMrsStore($mobile,$sign)
    {
        // 1.更换美容师门店

        // 2.更换下面顾客门店

        // 3.更换顾客下面订单门店
        Db::startTrans();
        try{
            $where['sign'] = $sign;
            $where['mobile'] = $mobile;
            $res = $this->updMrsBwk($where);
            Db::commit();
            $this->code = 1;
            $this->msg = '美容师及名下顾客转移成功';
            $this->data = $res;
        }catch(Exception $e){
            // 回滚事务
            Db::rollback();
            $this->msg .= $e->getMessage();
        }
        return $this->returnArr();
    }

    /**
     * 更新412直播门店观看权限
     * @return \think\response\Json
     */
    public function updateSeeLive()
    {
        $this->code = 0;
        $this->msg = '更新失败';
        // 1.查询目前已开通412门店编号
        $map_b['act_flag315'] = 1;
        $res_bwk = $this->getBwk($map_b,2);
        if($res_bwk){
            $stores = [];
            foreach ($res_bwk as $v) {
                $stores[] = $v['sign'];
            }
            $stores1 = implode(',',$stores);
            // 2.按,分割更新到mobile=1直播配置中
            $map_u['mobile'] = 111;
            $data_u['store_signs'] = $stores1;
            $this->updSeeLive($map_u,$data_u);
//             3.清除服务器直播列表redis缓存
            $this->clearRedis('livelist19');

            $this->code = 1;
            $this->msg = '开通门店-收看直播权限更新成功';
        }
        return $this->returnArr();
    }
    /**
     * 批量开通门店活动权限
     * @param string $sign [门店编号,多个,分割]
     * @return \think\response\Json
     */
    public function openLive($sign)
    {
        $this->code = 0;
        $this->msg = '开通失败';
        // 门店多家切割成数组
        $signs = explode(',',$sign);
        Db::startTrans();
        try{
            // 1.开通门店直播活动开关
            $storeids = $this->openZb($signs);
            // 2.开通直播商品
            $this->openZbGd($storeids);
            // 3.开通88礼券商品
            $this->openZbCard($storeids);
            // 4.下架肌底液商品
//            $this->closeZbJdy($storeids);
            // 提交事务
            Db::commit();
            $this->code = 1;
            $this->msg = '开通成功';
            $this->data = $signs;
        }catch( Exception $e){
            // 回滚事务
            Db::rollback();
            $this->msg .= $e->getMessage();
        }
        return $this->returnArr();
    }

    /**
     * 开通门店直播活动开关
     * @param $signs
     */
    protected function openZb($signs)
    {
        // 门店模型
        $map['sign'] = ['in',$signs];
        $data['act_flag315'] = 1;
        $this->bwk_model->where($map)->update($data);
        // 返回门店id列表
        $res = $this->bwk_model->where($map)->select();
        $storeids = [];
        if($res){
            foreach ($res as $v) {
                $storeids[] = $v['id'];
            }
        }
        return $storeids;
    }
    /**
     * 开通直播商品
     * @param array $storeids 门店id
     */
    protected function openZbGd($storeids)
    {
        // 商品模型
        $map1['storeid'] = ['in',$storeids];
        $map1['pid'] = ['in',$this->pidzb];
        $data1['status'] = 1;
        $data1['isshow'] = 1;
        $data1['deleted'] = 0;
        $this->gd_model->where($map1)->update($data1);
    }
    /**
     * 开通88礼券商品
     * @param array $storeids 门店id
     */
    protected function openZbCard($storeids)
    {
        // 商品模型
        $map2['storeid'] = ['in',$storeids];
        $map2['pid'] = ['in',$this->pidcard];
        $data2['status'] = 1;
        $data2['isshow'] = 1;
        $data2['deleted'] = 0;
        $this->gd_model->where($map2)->update($data2);
    }
    /**
     * 下架直播间肌底液商品
     */
    protected function closeZbJdy($storeids)
    {
        // 商品模型
        $map2['storeid'] = ['in',$storeids];
        $map2['pid'] = ['in',$this->pidjdy];
        $data2['deleted'] = 1;
        $this->gd_model->where($map2)->update($data2);
    }

    /**
     * 获取门店数据
     * @param array $where 查询条件
     * @param int $limit 查询条数,1:单条,2:多条
     */
    protected function getBwk($where,$limit=1)
    {
        $res = [];
        // 单条
        if($limit == 1){
            $res = $this->bwk_model->where($where)->limit(1)->find();
        }elseif($limit == 2){
        // 多条
            $res = $this->bwk_model->where($where)->select();
        }
        return $res;
    }
    /**
     * 更新直播权限门店数据
     * @param array $where 查询条件
     * @param array $data 更新的数据
     */
    protected function updSeeLive($where,$data)
    {
        $res = Db::table('think_live_see_conf')->where($where)->update($data);
    }
    /**
     * 清除服务器直播列表redis缓存
     * @param string $paras 键名
     */
    protected function clearRedis($paras)
    {
        curl_get('http://live.qunarmei.com/api/live/clearRedis?paras='.$paras);
    }
    /**
     * 更换美容师及名下顾客门店及顾客订单
     * @param array $where 查询条件
     * @param array $data 更新的数据
     */
    protected function updMrsBwk($where)
    {
        $arr = [];
        // 1.查询门店
        $map_store['sign'] = $where['sign'];
        $res_store = Db::table('ims_bwk_branch b')->where($map_store)->limit(1)->find();
        // 2.转移门店
        if($res_store){
            $arr['storeid'] = $res_store['id'];
            $data['storeid'] = $res_store['id'];
            $map['mobile'] = $where['mobile'];

            // 3.查询美容师信息
            $res_mrs = Db::table('ims_bj_shopn_member m')->where($map)->limit(1)->find();
            if($res_mrs){
                $arr['mrs_id'] = $res_mrs['id'];
                // 更换下面顾客门店
                $map_gk['pid'] = $res_mrs['id'];
                $data_gk['storeid'] = $res_store['id'];
                Db::table('ims_bj_shopn_member')->where($map_gk)->update($data_gk);

                // 更换顾客订单门店
                Db::table('ims_bj_shopn_order')->where($map_gk)->update($data_gk);

            }
            $res = Db::table('ims_bj_shopn_member')->where($map)->update($data);
        }
        return $arr;
    }
}