<?php
/**
 * Created by PhpStorm.
 * User: luxiao
 * Date: 2017/4/19
 * Time: 16:21
 */

namespace my;

class RedisPackage
{
    private static $handler = null;
    private static $_instance = null;
    private static $options = [];

    private function __construct($options = [])
    {
        $config=config('redis');
        if (!extension_loaded('redis')) {
            throw new \BadFunctionCallException('not support: redis');      //判断是否有扩展
        }
        if (empty($options)) {
            self::$options = array_merge($config, $options);
        }
        $func = self::$options['persistent'] ? 'pconnect' : 'connect';     //长链接
        self::$handler = new \Redis();
        try{
            if (self::$handler->$func(self::$options['host'], self::$options['port'], self::$options['timeout'])== false){
                die(self::$handler->getLastError());
            }

            if ('' != self::$options['password']) {
                self::$handler->auth(self::$options['password']);
            }
            if (0 != self::$options['select']) {
                self::$handler->select(self::$options['select']);
            }
        }catch (\Exception $e){
            $e->getMessage();
        }
    }

    /**
     * @return RedisPackage|null 对象
     */
    public static function getInstance()
    {
        if (!(self::$_instance instanceof self)) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    /**
     * 禁止外部克隆
     */
    public function __clone()
    {
        trigger_error('Clone is not allow!',E_USER_ERROR);
    }

    /**
     * 写入缓存
     * @param string $key 键名
     * @param string $value 键值
     * @param int $exprie 过期时间 0:永不过期
     * @return bool
     */


    public static function set($key, $value, $exprie = 0)
    {
        if ($exprie == 0) {
            $set = self::$handler->set($key, $value);
        } else {
            $set = self::$handler->setex($key, $exprie, $value);
        }
        return $set;
    }

    /**
     * 读取缓存
     * @param string $key 键值
     * @return mixed
     */
    public static function get($key)
    {
        $fun = is_array($key) ? 'Mget' : 'get';
        return self::$handler->{$fun}($key);
    }

    /**
     *键是否存在
     * @param $key
     * @return bool
     */
    public static function exists($key){
        $have = self::$handler->EXISTS($key);
        return $have;
    }




    /**
     * 设置set
     * @param $key
     * @param $value
     * @param int $exprie
     * @return bool
     */
    public static function sadd($key, $value)
    {
        $set = self::$handler->SADD($key, $value);
        return $set;
    }


    /**
     * 移出set中key的一个值
     * @param string $key
     * @return string
     */
    public static function srem($key,$value)
    {
        return self::$handler->SREM($key,$value);
    }



    /**
     * 获取值长度
     * @param string $key
     * @return int
     */
    public static function lLen($key)
    {
        return self::$handler->lLen($key);
    }

    /**
     * 获取集合中的元素
     * @param $key
     * @return array
     */
    public static function sMembers($key)
    {
        return self::$handler->sMembers($key);
    }

    /**
     * 将一个或多个值插入到列表头部
     * @param $key
     * @param $value
     * @return int
     */
    public static function LPush($key, $value)
    {
        return self::$handler->lPush($key, $value);
    }

    /**
     * 移出并获取列表的第一个元素
     * @param string $key
     * @return string
     */
    public static function lPop($key)
    {
        return self::$handler->lPop($key);
    }


    /**
     * key递增加1
     * @param string $key
     * @return string
     */
    public static function INCR($key)
    {
        return self::$handler->INCR($key);
    }

    /**
     * key删除
     * @param string $key
     * @return string
     */
    public static function  DEL($key)
    {
        return self::$handler->DEL($key);
    }


}